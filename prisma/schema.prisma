// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  ANGGOTA
  MAHASISWA
}

model User{
  id String @id @default(uuid())
  username String @unique @db.VarChar(100)
  email String @unique @db.VarChar(100)
  password String @db.VarChar(255)
  token     String?  @db.VarChar(255)
  role      Role     @default(MAHASISWA) 
  created_at DateTime @default(now())
  forums Forum[]
  comments Comment[]
  @@map("user")
}

model Forum {
  id        String   @id @default(uuid())          
  title     String   @db.VarChar(255)               
  content   String   @db.Text                        
  author_id String                                   
  created_at DateTime @default(now())                
  author User @relation(fields: [author_id], references: [id])
  comments Comment[]
  @@index([author_id])
  @@index([created_at])
  @@map("forum")
}

model Comment{
  id String @id @default(uuid())
  content String @db.Text 
  author_id String 
  forum_id String 
  parent_id String?
  created_at DateTime @default(now())

  author User @relation(fields: [author_id],references: [id])
  forum Forum @relation(fields: [forum_id], references: [id])
  parent_comment Comment? @relation("CommentReplies",fields: [parent_id], references: [id])
  replies Comment[] @relation("CommentReplies")
  @@index([author_id])
  @@index([forum_id])
  @@index([created_at])
  @@map("comment")
}

model Event {
  id          String    @id @default(uuid())        
  title       String    @db.VarChar(255)           
  description String?   @db.Text                    
  event_date  DateTime  @db.Date               
  location    String?   @db.VarChar(255)            
  image_url   String?   @db.Text                     
  created_at  DateTime  @default(now())    
  @@map("event")          
}

model Organization {
  id            String           @id @default(uuid())        
  name          String           @db.VarChar(100)           
  position      String           @db.VarChar(255)            
  description   String?          @db.Text                  
  photo_url     String?          @db.Text                   
  created_at    DateTime         @default(now())             
  group_id      String           
  group         OrganizationGroup @relation(fields: [group_id], references: [id]) 
  @@map("organization")
}

model OrganizationGroup {
  id            String           @id @default(uuid())        
  name          String           @db.VarChar(100)            
  description   String?          @db.Text                    
  created_at    DateTime         @default(now())             
  members       Organization[]   
  @@map("organization_group")
}

model Contact {
  id         String   @id @default(uuid())          
  name       String   @db.VarChar(255)               
  email      String   @db.VarChar(255)               
  message    String   @db.Text                       
  created_at DateTime @default(now())               
  is_read    Boolean  @default(false)              
  response   String?  @db.Text                       
  responded_at DateTime? @db.Date 
  @@index([created_at]) 
  @@index([is_read])  
  @@map("contact")           
}
